using BedBrigade.Common.Constants;
using BedBrigade.Common.Logic;
using BedBrigade.Data;
using KellermanSoftware.AddressParser;
using KellermanSoftware.NameParser;
using Microsoft.EntityFrameworkCore;
using Syncfusion.Licensing;
using Syncfusion.XlsIO;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BedBrigade.Tests.Integration
{
    [TestFixture]
    public class ImportVolunteersPolaris
    {
        private const string FilePath = @"D:\DocumentsAllUsers\Greg\_dropbox\Dropbox\Transfer\Volunteer_Management_1754910935.xlsx";
        private const string ConnectionString =
            "server=localhost\\sqlexpress;database=bedbrigade;trusted_connection=SSPI;Encrypt=False";
        private readonly NameParserLogic _nameParserLogic = LibraryFactory.CreateNameParser();

        private string[] groups = new[]
        {
            "Volunteer Management",
            "New Volunteers",
            "Spanish Speakers",
            "Build Volunteers",
            "Delivery Volunteers"
        };

        [Test]
        public async Task Import()
        {
            if (!TestHelper.IsWindows() || !TestHelper.ThisComputerHasExcelInstalled())
            {
                Assert.Ignore("This test should only run locally.");
            }

            DataContext context = CreateDbContext(ConnectionString);
            await DeleteExistingVolunteersForLocation(context, Defaults.PolarisLocationId);
            List<PolarisVolunteer> polarisVolunteers = ExcelToVolunteers();




            //List<BedRequest> existing = await context.BedRequests.ToListAsync();
            //List<BedRequest> newPolaris = CombinePolaris(polarisBedRequests);
            //await Reconcile(context, existing, newPolaris);
        }

        private List<PolarisVolunteer> ExcelToVolunteers()
        {
            List<PolarisVolunteer> results = new List<PolarisVolunteer>();
            SyncfusionLicenseProvider.RegisterLicense(LicenseLogic.SyncfusionLicenseKey);
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            IWorkbook workbook = application.Workbooks.Open(FilePath);
            IWorksheet sheet = workbook.Worksheets.First();
            IRange usedRange = sheet.UsedRange;
            int lastRow = usedRange.LastRow;
            string group = "New Volunteers";

            for (int i = 1; i <= lastRow; i++)
            {
                string name = usedRange[i, 1].Value?.ToString();

                // Skip empty and header rows
                if (string.IsNullOrEmpty(name) || name == "Name" || name == "Volunteer Management")
                {
                    continue;
                }
                // Check if the group has changed
                if (groups.Contains(name))
                {
                    group = name;
                    continue; // Skip the group header row
                }
                PolarisVolunteer volunteer = new PolarisVolunteer
                {
                    Group = group,
                    Name = usedRange[i, 1].Value?.ToString(),
                    Apellido = usedRange[i, 2].Value?.ToString(),
                    CreationLog = usedRange[i, 3].Value.ToString(),
                    EmailAddress = usedRange[i, 4].Value?.ToString(),
                    PhoneNumber = usedRange[i, 5].Value?.ToString(),
                    DoYouAttendChurch = usedRange[i, 6].Value?.ToString(),
                    ChurchName = usedRange[i, 7].Value?.ToString(),
                    VolunteerArea = usedRange[i, 9].Value?.ToString(),
                    DoYouHaveAVehicle = usedRange[i, 10].Value?.ToString(),
                    VehicleType = usedRange[i, 11].Value?.ToString(),
                    VehicleDescription = usedRange[i, 12].Value?.ToString(),
                    DoYouSpeakSpanish = usedRange[i, 14].Value?.ToString(),
                    CanYouTranslate = usedRange[i, 15].Value?.ToString(),
                };
                results.Add(volunteer);
            }

            return results;
        }

        public DataContext CreateDbContext(string connectionString)
        {
            var optionsBuilder = new DbContextOptionsBuilder<DataContext>();
            optionsBuilder.UseSqlServer(connectionString);
            return new DataContext(optionsBuilder.Options);
        }

        public async Task DeleteExistingVolunteersForLocation(DataContext context, int locationId)
        {
            var volunteers = await context.Volunteers.Where(o => o.LocationId == locationId).ToListAsync();
            context.Volunteers.RemoveRange(volunteers);
            await context.SaveChangesAsync();
        }


        /// <summary>
        /// Generated by Chat GPT 5
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        /// <exception cref="FormatException"></exception>
        private DateTime ParseCreationLog(string input)
        {
            // Example: "Katie McDaniel Dec 15, 2022 9:07 AM"
            // Step 1: Extract just the date/time portion
            var parts = input.Split(' ', 3);
            if (parts.Length < 3)
                throw new FormatException("Input does not contain enough parts to parse.");

            string dateTimePart = input.Substring(input.IndexOf(parts[2]));

            // Step 2: Parse to DateTime with no time zone
            if (!DateTime.TryParseExact(
                    dateTimePart,
                    "MMM d, yyyy h:mm tt",
                    CultureInfo.InvariantCulture,
                    DateTimeStyles.None,
                    out var easternTime))
            {
                throw new FormatException("Could not parse date/time portion.");
            }

            // Step 3: Interpret as Eastern Time and convert to UTC
            TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
            DateTime utcTime = TimeZoneInfo.ConvertTimeToUtc(easternTime, easternZone);

            return utcTime;
        }
        

}
}
