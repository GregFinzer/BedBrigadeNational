@using BedBrigade.Common.Models
@inject IJSRuntime JSRuntime

<div class="container-fluid">

    @if (showDetails)
    {
        <!-- Show single card details -->
        <div class="details-view">
            <BlogView CurrentBlog="ActiveCard"
            OnClose="CloseDetail"
            OnNavigate="NavigateDetail"                     
            ParentFrame="Card"                     
            />
        </div>
    }
    else
    {
        @if (ComputedPaging)
        {
            <!-- Top Pagination Bar  -->
            <div class="row justify-content-center align-items-center my-3">
                <div class="col-12 col-md-6 d-flex align-items-center justify-content-between">
                    <button class="btn btn-secondary w-md-auto me-md-3 text-nowrap align-items-center justify-content-center" style="width: 200px" @onclick="PreviousPage" disabled="@IsFirstPage">
                        <i class="fas fa-angle-double-left"></i>&nbsp;@_lc.Keys["PagePrevious"]
                    </button>
                    <div class="text-center d-flex d-none d-md-block align-items-center justify-content-center flex-grow-1" style="height: 40px; min-width: 250px;">
                        <span class="page-info">@_lc.Keys["Page"]&nbsp;@(_currentPage + 1)&nbsp;@_lc.Keys["Of"]&nbsp;@TotalPages</span>
                        &nbsp;<span class="page-info" style="white-space: nowrap">(@BlogItemList.Count&nbsp;@_lc.Keys["TotalItems"])</span>
                    </div>
                    <button class="btn btn-secondary w-md-auto ms-md-3 text-nowrap align-items-center justify-content-center" style="width: 200px" @onclick="NextPage" disabled="@IsLastPage">
                        @_lc.Keys["PageNext"]&nbsp;<i class="fas fa-angle-double-right"></i>
                    </button>
                </div>
                <div class="col-12 d-md-none text-center mt-2 text-nowrap">
                    <span class="page-info">@_lc.Keys["Page"]&nbsp;@(_currentPage + 1)&nbsp;@_lc.Keys["Of"]&nbsp;@TotalPages</span>
                    <span class="page-info" style="white-space: nowrap">(@BlogItemList.Count&nbsp;@_lc.Keys["TotalItems"])</span>
                </div>
            </div>
        }

        <div class="row mt-3">

            <!-- Render with pagination -->
            @foreach (var row in CurrentPageData.Chunk(Columns))
            {
                var i = 0;
                <div class="row d-flex align-items-stretch mb-3">
                    @foreach (var card in row)
                    {
                        CurrentCard = card;
                        i++;
                        var contentText = card.ContentHtml?.Length <= MaxContentSize ? card.ContentHtml : card.ContentHtml?.Substring(0, MaxContentSize) + "...";
                        var contentCreateMonth = _translateLogic.GetTranslation(card.CreatedDateMonth);
                        var contentUpdatedMonth = _translateLogic.GetTranslation(card.UpdatedDateMonth);

                        @if(Columns==1){
                          @* Single-column layout *@
                            <div class="card mb-3 clickable @(card == ActiveCard ? "active-card" : "")" 
                                                @ref="cardRefs[CurrentPageData.ToList().IndexOf(card)]" 
                                                @onclick="() => OpenDetail(card.ContentId)" 
                                                style="max-width: 100%;">
                                                 <div class="row g-0 align-items-top">
                                                    <div class="col-md-4 jd-flex justify-content-center align-items-center" >
                                                        <img src="@card.MainImageUrl" class="img-fluid rounded-start thumbnail-image clickable" alt="@card.Title" >
                                                    </div>
                                                    <div class="col-md-8 ">
                                                            <div class="card-body">
                                                                <h6 style="text-align: right; font-size: small; color: green">
                                                                    <i>
                                                                        @_lc.Keys["PostedOn"]&nbsp;@contentCreateMonth&nbsp;@card.CreatedDatePeriod&nbsp;|&nbsp;
                                                                        @_lc.Keys["LastModifiedOn"]&nbsp;@contentUpdatedMonth&nbsp;@card.UpdatedDatePeriod
                                                                    </i>
                                                                </h6>
                                                                <h4 class="card-title clickable" >@card.Title</h4>
                                                                <p class="card-text">@((MarkupString)contentText)</p>                                                                  
                                                            </div>
                                   
                                                    </div>
                                                </div>
                                            </div>
                                    }
                                    else
                                    {

                                        <div class="col">
                                    <div class="card h-100 clickable @(card == ActiveCard ? "active-card" : "")"
                                            @onclick="() => OpenDetail(card.ContentId)"
                                            data-id="@card.ContentId"
                                            @ref="cardRefs[CurrentPageData.ToList().IndexOf(card)]">
                                                    <div class="card-header d-flex justify-content-center">
                                                            <div class="thumbnail-frame">
                                            <img src="@card.MainImageUrl" class="thumbnail-image clickable" alt="@card.Title">
                                                            </div>
                                                    </div>
                                                    <div class="card-body">
                                                        <h6 style="text-align: right; font-size: small; color: green">
                                                            <i>
                                                                @_lc.Keys["PostedOn"]&nbsp;@contentCreateMonth&nbsp;@card.CreatedDatePeriod&nbsp;|&nbsp;
                                                                @_lc.Keys["LastModifiedOn"]&nbsp;@contentUpdatedMonth&nbsp;@card.UpdatedDatePeriod
                                                           </i>
                                                        </h6>
                                                        <h4 class="card-title clickable" >@card.Title</h4>
                                                        <p class="card-text">@((MarkupString)contentText)</p>                                                               
                                                    </div>     
                                         </div>
                                        </div>
                                    }
                                }

                                @if (i < Columns)
                                    {
                                        for (var j = i; j < Columns; j++)
                                        {
                                            <div class="col">
                                                <div class="card h-100">
                                                    <div class="card-header h-100">
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                    }

                </div>
             }            

        </div>

        @if (ComputedPaging)
        {
            
            <!-- Bottom Pagination Bar (Same as Top) -->
            <div class="row justify-content-center align-items-center my-3">
                <div class="col-12 col-md-6 d-flex align-items-center justify-content-between">
                    <button class="btn btn-secondary w-md-auto me-md-3 text-nowrap align-items-center justify-content-center" style="width: 200px" @onclick="PreviousPage" disabled="@IsFirstPage">
                        <i class="fas fa-angle-double-left"></i>&nbsp;@_lc.Keys["PagePrevious"]
                    </button>
                    <div class="text-center d-flex d-none d-md-block align-items-center justify-content-center flex-grow-1" style="height: 40px; min-width: 250px;">
                        <span class="page-info">@_lc.Keys["Page"]&nbsp;@(_currentPage + 1)&nbsp;@_lc.Keys["Of"]&nbsp;@TotalPages</span>
                        &nbsp;<span class="page-info" style="white-space: nowrap">(@BlogItemList.Count&nbsp;@_lc.Keys["TotalItems"])</span>
                    </div>
                    <button class="btn btn-secondary w-md-auto ms-md-3 text-nowrap align-items-center justify-content-center" style="width: 200px" @onclick="NextPage" disabled="@IsLastPage">
                        @_lc.Keys["PageNext"]&nbsp;<i class="fas fa-angle-double-right"></i>
                    </button>
                </div>
                <div class="col-12 d-md-none text-center mt-2 text-nowrap">
                    <span class="page-info">@_lc.Keys["Page"]&nbsp;@(_currentPage + 1)&nbsp;@_lc.Keys["Of"]&nbsp;@TotalPages</span>
                    <span class="page-info" style="white-space: nowrap">(@BlogItemList.Count&nbsp;@_lc.Keys["TotalItems"])</span>
                </div>
            </div>

        }
    }
</div>

<script>
    function scrollToTop() {
        window.scrollTo(0, 0);
    }    
</script>

<style>

    .pagination-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* Spacing between elements */
    }

    .page-info {
        font-size: small;
        font-weight: 600;
    }
    
     
    .blog-author span {
        color: #0e9241;
        font-family: 'Function';
        font-size: 13px;
        font-weight: normal;
    }

    .blog-content-block h5 {
        font-size: 18px;
        font-weight: bold;
        margin: 0 0 15px;
    }

        .blog-content-block h5 a {
            color: #0e9241;
            text-decoration: underline;
        }

    .blog-content-block  {
        font-weight: bold;
        font-size: 14px;
        line-height: 24px;
        color: #2e302f;
        margin: 0
    }

    .fixed-thumbnail {
        width: auto; /* Keeps the original width */
        height: auto; /* Keeps the original height */
        max-width: 150px; /* Optional: Restricts the max width */
        max-height: 150px; /* Optional: Restricts the max height */
        display: block; /* Ensures proper alignment */
        margin: 0 auto; /* Centers the image */
    }

    .thumbnail-frame {
        width: 400px; /* Fixed width for the frame - 250?*/
        height: 350px; /* Fixed height for the frame */
        display: flex; /* Centers content both horizontally and vertically */
        justify-content: center; /* Centers image horizontally */
        text-align:center;
        align-items: center; /* Centers image vertically */
        /* background-color: #f8f9fa;  Optional: Add a light background color for empty spaces */
        overflow: hidden; /* Ensures the image doesn't spill out of the frame */
        /* border: 1px solid #ddd;  Optional: Add a border for styling */
        /* border-radius: 8px;  Optional: Add rounded corners */
    }

    .thumbnail-image {
        max-width: 100%; /* Ensures the image scales down proportionally */
        max-height: 100%; /* Ensures the image scales to fit within the frame */
        object-fit: contain; /* Keeps the aspect ratio and fits within the frame */
    }

    .clickable {
        cursor: pointer;
        color: #007bff;
        text-decoration: none;
    }

    .clickable:hover {
            text-decoration: none;
            color: #0056b3;
        }
 

    .details-view {
        width: 100%; /* Full width of the wrapper */
        background-color: #fff; /* White background for the content */
        border-radius: 8px; /* Rounded corners */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
        overflow: hidden; /* Clip overflowing content */
        padding: 20px;
    }
   
 
    .active-card {
        border: 2px solid #007bff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }          

    .card.placeholder {
        background-color: transparent;
        border: none;
        box-shadow: none;
        height: 100%; /* Ensures uniform height */
    }
       

</style>

