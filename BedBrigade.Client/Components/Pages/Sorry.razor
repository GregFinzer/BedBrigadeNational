@page "/sorry"
@page "/sorry/{mylocation:nonfile}"
@page "/sorry/{mylocation:nonfile}/{mypageName:nonfile}"
@page "/{mylocation:nonfile}/sorry/"
@page "/{mylocation:nonfile}/sorry/{mypageName:nonfile}"

@using Serilog
<PageTitle>@_lc.Keys["Sorry"]</PageTitle>

@if (IsLocationActive)
{

    <h1 class="text-center mt-5">@_lc.Keys["SorryThePage"] </h1>


    @if (mylocation != null && mypageName != null)
    {
        <h2 class="text-center mt-5">@_lc.Keys["YouWereTryingTo"]<br />/@mylocation/@mypageName</h2>
    }
    else if (mylocation != null)
    {
        <h2 class="text-center mt-5">@_lc.Keys["YouWereTryingTo"]<br />/@mylocation</h2>
    }
}
else
{
    <h1 class="text-center mt-5">@_lc.Keys["LocationNotActive"]<br />/@mylocation</h1>
}

<div class="text-center">
    <a href="@HomeUrl" class="btn btn-primary">@_lc.Keys["ReturnToHome"]</a>
</div>

@code {
    [Inject] private ILanguageContainerService _lc { get; set; }
    [Inject] private ILocationDataService _svcLocation { get; set; }
    [Inject] private IAuthService _authService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Parameter] public string? mylocation { get; set; }
    [Parameter] public string? mypageName { get; set; }

    public string HomeUrl = "/";
    private bool IsLocationActive = true;

    protected override void OnInitialized()
    {
        _lc.InitLocalizedComponent(this);
        if (mylocation != null && mypageName != null)
        {
            HomeUrl = $"/{mylocation}";
            CheckLocationStatus(mylocation);           
            Log.Logger.Warning($"404 for Page: /{mylocation}/{mypageName}");

        }
        else if (mylocation != null)
        {
            Log.Logger.Warning($"404 for Page: /{mylocation}");
        }
        else
        {
            Log.Logger.Warning($"404 for Page: /sorry");
        }
    } // init

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_authService.IsLoggedIn)
        {
            var restoredFromState = await _authService.GetStateFromTokenAsync();
            if (restoredFromState && _authService.IsNationalAdmin)
            {
                var locationResponse = await _svcLocation.GetLocationByRouteAsync($"/{mylocation}");

                if (locationResponse.Success && locationResponse.Data != null)
                {
                    _navigationManager.NavigateTo($"/{mylocation}/{mypageName}", false);
                }
            }
        }
    }

    private async void CheckLocationStatus(string location)
    {
        try
        {
            // location can be not active or not exists
            var locationResponse = await _svcLocation.GetLocationByRouteAsync($"/{location}");
            if (locationResponse.Message.ToLower().Contains("not found"))
            {
                IsLocationActive = false;
                HomeUrl = $"/"; // return to national home
            }
            else
            {
                if (locationResponse.Success && locationResponse.Data != null)
                {
                    IsLocationActive = locationResponse.Data.IsActive;
                    if (!IsLocationActive)
                    {
                        HomeUrl = $"/"; // return to national home
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Log.Logger.Error(ex, $"Sorry.CheckLocationStatus");
        }
    } // location status

}
