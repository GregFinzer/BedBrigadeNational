@* Generated by ChatGPT Version 5 Thinking *@
@layout Layout.AdminLayout
@page "/administration/admin/viewlogs"
<CheckAuth Roles=@RoleNames.NationalAdmin></CheckAuth>

<div class="d-flex align-items-end gap-3 flex-wrap mb-3">
    <div class="d-flex align-items-center gap-2 mt-2">
        <label for="logSelect" class="form-label fw-semibold mb-0">View Logs</label>
        <select id="logSelect" class="form-select w-auto" @onchange="OnLogChanged">
            @if (LogFiles.Count == 0)
            {
                <option disabled selected>— no logs found —</option>
            }
            else
            {
                @foreach (var lf in LogFiles)
                {
                    <option value="@lf.FullPath">@lf.DisplayName</option>
                }
            }
        </select>
    </div>

    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkDebug" @bind="ShowDebug">
        <label class="form-check-label" for="chkDebug">Debug</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkInfo" @bind="ShowInfo">
        <label class="form-check-label" for="chkInfo">Info</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkWarn" @bind="ShowWarn">
        <label class="form-check-label" for="chkWarn">Warn</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkError" @bind="ShowError">
        <label class="form-check-label" for="chkError">Error</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkBackground" @bind="ShowBackground">
        <label class="form-check-label" for="chkBackground">Background</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="chkShouldTail" @bind="ShouldTail">
        <label class="form-check-label" for="chkShouldTail">Should Tail</label>
    </div>
  
    <!-- NEW: Max Log Entries -->
    <div class="d-flex align-items-center gap-2">
        <label for="maxEntries" class="form-label mb-0">Max</label>
        <input id="maxEntries" type="number" class="form-control form-control-sm"
                style="width: 100px"
               min="0" @bind="MaxLogEntries" />
    </div>

    <!-- NEW: All Log Entries (read-only label) -->
    <div class="d-flex align-items-center">
        <label class="form-label mb-0">Total: <span class="fw-semibold">@AllLogEntriesCount</span></label>
    </div>

    <!-- NEW: Search -->
    <div class="d-flex align-items-center gap-2">
        <label for="logSearch" class="form-label mb-0">Search</label>
        <input id="logSearch" type="text" class="form-control form-control-sm w-auto"
               placeholder="search…" @bind="SearchString" @bind:event="oninput" />
    </div>

    <div class="ms-auto small text-muted">
        @if (IsTailing) { <span>tailing live…</span> } else if (IsLoading) { <span>loading…</span> }
    </div>
</div>

@if (LoadError is not null)
{
  <div class="alert alert-danger">
    <strong>Failed to load log:</strong> @LoadError
  </div>
}

@if (FilteredEntries.Count == 0 && !IsLoading)
{
  <div class="alert alert-info">No log entries to display with current filters.</div>
}

<div class="log-container" @ref="LogContainerRef">
  @foreach (var e in FilteredEntries)
  {
    <div class="log-event @e.LevelCss">
      <div class="log-header">
        <span class="log-ts">@e.Timestamp?.ToString("yyyy-MM-dd HH:mm:ss.fff zzz")</span>
        <span class="badge level">@e.Level</span>
        @if (!string.IsNullOrWhiteSpace(e.SourceContext)) { <span class="src">[@e.SourceContext]</span> }
        @if (!string.IsNullOrWhiteSpace(e.EventId)) { <span class="eid">[@e.EventId]</span> }
        @if (!string.IsNullOrWhiteSpace(e.UserId)) { <span class="uid">[User=@e.UserId]</span> }
      </div>
      @if (!string.IsNullOrWhiteSpace(e.Message))
      {
        <pre class="log-message">@e.Message</pre>
      }
      @if (!string.IsNullOrWhiteSpace(e.Exception))
      {
        <pre class="log-ex">@e.Exception</pre>
      }
    </div>
  }
</div>

@code {
  // all logic lives in ViewLogs.razor.cs (code-behind)
}

<style>
  .log-container { max-height: 80vh; overflow: auto; background: #0b0b0b; color: #ddd; border: 1px solid #333; border-radius: .5rem; padding: .75rem; }
  .log-event { padding: .5rem .6rem; border-left: 4px solid transparent; margin-bottom: .35rem; background: #121212; border-radius: .25rem; }
  .log-header { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; font-size: .9rem; color:#9fb0c0; display:flex; gap:.5rem; align-items:center; flex-wrap:wrap; }
  .log-ts { opacity: .9; }
  .badge.level { font-size: .7rem; background:#555; color:#fff; padding:.15rem .35rem; border-radius:.25rem; }
  .log-message, .log-ex { margin: .25rem 0 0 0; white-space: pre-wrap; font-family: ui-monospace, monospace; }
  .src, .eid, .uid { color:#8aa; }
  .Debug    { border-left-color:#6c757d; }
  .Information { border-left-color:#0d6efd; }
  .Warning  { border-left-color:#ffc107; }
  .Error    { border-left-color:#dc3545; }
</style>

<script>
  window.blazorScrollToBottom = (el) => {
    if (!el) return;
    el.scrollTop = el.scrollHeight || 0;
  };
</script>