@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop;
@using BedBrigade.Client.Services;
@using System.Security.Claims;
@using BedBrigade.Common;
@using HtmlAgilityPack;
@using Serilog
@inject IJSRuntime JS

@((MarkupString)BodyContent)

@code {
    // Client
    [Inject] private IJSRuntime _js { get; set; }
    [Inject] private IContentDataService _svcContent { get; set; }
    [Inject] private ILocationDataService _svcLocation { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private ILoadImagesService _loadImagesService { get; set; }

    string FileName { get; set; } = "NoImageFound.jpg";


    private Content content { get; set; }
    private string BodyContent = string.Empty;
    private string[] routePath;
    private string Menu { get; set; }
    private string Path { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBody();
    }

    public void RefreshState()
    {
        StateHasChanged();
    }

    public async Task LoadBody()
    {
        try
        {
            var url = _navigationManager.Uri;
            var PageName = string.Empty;
            var Location = string.Empty;
            var routePath = url.Split('/');
            if (string.IsNullOrEmpty(routePath[3]))
            {
                Location = "National";
                PageName = "Home";
            }
            else if (routePath.Length < 5)
            {
                _navigationManager.NavigateTo("/National/Sorry", true);
                return;
            }
            else
            {
                Location = routePath[3];
                PageName = routePath[4];
            }
            Path = $"/{Location}/pages/{PageName}";
            await LoadLocationPage(Location, PageName);
        }
        catch (Exception ex)
        {
            Log.Logger.Error(ex.Message);
        }
    }

    private async Task LoadLocationPage(string location, string pageName)
    {
        var locationResponse = await _svcLocation.GetLocationByRouteAsync($"/{location}");

        if (locationResponse.Success && locationResponse.Data != null)
        {
            Console.WriteLine($"Location passed {location} Location {locationResponse.Data.LocationId} ");
            var contentResult = await _svcContent.GetAsync(pageName, locationResponse.Data.LocationId);
            Console.WriteLine($"Page: {pageName} Location: {locationResponse.Data.LocationId}");
            if (contentResult.Success)
            {
                content = contentResult.Data;
                string html = _loadImagesService.SetImagesForHtml(Path, contentResult.Data.ContentHtml);
                BodyContent = html;
                Console.WriteLine($"Set active on {Menu}");
                await _js.InvokeVoidAsync("AddRemoveClass.SetClass", Menu, "active");
                Menu = FindMenu();
                if (string.IsNullOrEmpty(Menu))
                {
                    Menu = "home";
                }
            }
            else
            {
                _navigationManager.NavigateTo("/National/Sorry", true);
            }
        }
    }


    protected string FindMenu()
    {
        var location = _navigationManager.Uri.Split('/');
        if(location.Length <= 4)
        {
            return "home";
        }
        return location[location.Length - 1].ToLower();
    }
}