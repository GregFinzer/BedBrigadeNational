@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop;
@using BedBrigade.Client.Services;
@using System.Security.Claims;
@using BedBrigade.Common;
@using HtmlAgilityPack;

@((MarkupString)BodyContent)

@code {
    // Client
    [Inject] private IJSRuntime _js { get; set; }
    [Inject] private IContentService _svcContent { get; set; }
    [Inject] private AuthenticationStateProvider _authState { get; set; }
    [Inject] private NavigationManager _nv { get; set; }

    [Parameter] public string PageName { get; set;}
    [Parameter] public string Caption { get; set; } = "Bed Brigade";
    [Parameter] public string Path { get; set; } = "National";

    string FileName { get; set; } = "NoImageFound.jpg";
    string LeftFileName { get; set; }
    string MiddleFileName { get; set; }
    string RightFileName { get; set; }
    List<string> LeftFileNames { get; set; }
    List<string> MiddleFileNames { get; set; }
    List<string> RightFileNames { get; set; }

    // Roles
    const string NationalAdmin = "National Admin";
    const string LocationAdmin = "Location Admin";
    const string LocationAuthor = "Location Author";
    const string LocationScheduler = "Location Scheduler";
    const string LoginElement = "loginElement";

    private Content content { get; set; }
    private string BodyContent = string.Empty;
    protected string Login = "login";
    private ClaimsPrincipal Identity { get; set; }
    private bool IsAuthenicated { get; set; } = false;
    private string Menu { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _svcContent.GetAsync(PageName);
        if (result.Success)
        {
            content = result.Data;
            BodyContent = result.Data.ContentHtml;
        }
        Menu = FindMenu();
    }


    protected override async Task OnParametersSetAsync()
    {
        const string startPath = "wwwroot/";
        if (!PathExist(Path))
        {
            Path = "National/pages/Error/";
            Caption = "Image Files Do Not Exist";
        }
        List<string> LeftFileNames = GetLeftImages(Path);
        List<string> MiddleFileNames = GetMiddleImages(Path);
        List<string> RightFileNames = GetRightImages(Path);
        LeftFileName = ComputeImageToDisplay(LeftFileNames);
        MiddleFileName = ComputeImageToDisplay(MiddleFileNames);
        RightFileName = ComputeImageToDisplay(RightFileNames);
        await SetImagesAsync();
    }

    private async Task<bool> SetImagesAsync()
    {   if(!string.IsNullOrEmpty(content.LeftMediaId))
        {
            var doc = new HtmlDocument();
            doc.LoadHtml(BodyContent);
            var body = doc.DocumentNode.SelectNodes("//main/div");
        }
        return true;
    }

    private string ComputeImageToDisplay(List<string> FileNames)
    {
        var unit = DateTime.Now.Hour * 2 + (DateTime.Now.Minute > 30 ? 1 : 0);
        var imageIndex = unit % FileNames.Count;
        return FileNames[imageIndex].Replace("wwwroot/", "");
    }

    private List<string> GetLeftImages(string path)
    {
        var fileNames = Directory.GetFiles($"wwwroot/media/{path}/Left").ToList();
        return fileNames;
    }

    private List<string> GetMiddleImages(string path)
    {
        var fileNames = Directory.GetFiles($"wwwroot/media/{path}/Middle").ToList();
        return fileNames;
    }

    private List<string> GetRightImages(string path)
    {
        var fileNames = Directory.GetFiles($"wwwroot/media/{path}/Right").ToList();
        return fileNames;
    }

    private bool PathExist(string path)
    {
        if (Directory.Exists($"wwwroot/media/{path}/Left") && Directory.Exists($"wwwroot/media/{path}/Middle") && Directory.Exists($"wwwroot/media/{path}/Right"))
        {
            return true;

        }
        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (!firstRender)
        //{
        //    var authState = await _authState.GetAuthenticationStateAsync();

        //    if (authState.User.HasRole($"{NationalAdmin}, {LocationAdmin}, {LocationAuthor}, {LocationScheduler}"))
        //    {
        //        await _js.InvokeVoidAsync("SetGetValue.SetInnerHtml", LoginElement, "Logout");
        //        await _js.InvokeVoidAsync("SetGetValue.SetAttribute", LoginElement, "href", "/home/logout");
        //    }
        //    else
        //    {
        //        await _js.InvokeVoidAsync("SetGetValue.SetInnerHtml", LoginElement, "Login");
        //        await _js.InvokeVoidAsync("SetGetValue.SetAttribute", LoginElement, "href", "/home/login");
        //    }

        //    await _js.InvokeVoidAsync("AddRemoveClass.SetClass", Menu, "active");
        //}

    }

    protected string FindMenu()
    {
        var location = _nv.Uri.Split('/');
        return location[location.Length - 1];
    }
}