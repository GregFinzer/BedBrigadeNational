@using System.Security.Claims;
@using BedBrigade.Client.Services;
@using BedBrigade.Data.Models;
@using BedBrigade.Common;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Authorization;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Notifications;
@using Action = Syncfusion.Blazor.Grids.Action;
@using static BedBrigade.Common.Common;
@using BedBrigade.Client.Pages.Administration.Manage;
@using System.Data;
@using BedBrigade.Client.Pages.Home;

<div class="rte-container">
    <SfRichTextEditor @ref=@RTE EditorMode="EditorMode.HTML" Height="850">
        <RichTextEditorImageSettings Path="/media/National/" AllowedTypes="AllowedTypes" />
        <RichTextEditorToolbarSettings Items="@Tools">
            <RichTextEditorCustomToolbarItems>
                <RichTextEditorCustomToolbarItem Name="Save">
                    <Template>
                        <SfButton @onclick="ClickHandler">Save</SfButton>
                    </Template>
                </RichTextEditorCustomToolbarItem>
            </RichTextEditorCustomToolbarItems>
        </RichTextEditorToolbarSettings>
        @((MarkupString)Body)
    </SfRichTextEditor>
</div>
<SfToast ID="SaveToast" @ref=@ToastObj Title="@ToastTitle" Width="300" Height="150" Target="#UserTarget" Content=@ToastContent>
    <ToastPosition X="Center" Y="Top"></ToastPosition>
    <ToastButtons>
        <ToastButton Content = "Close" OnClick=@HideToast />
    </ToastButtons>
</SfToast>

<SfDialog Width="800" MinHeight="200" @bind-Visible=@DialogVisible IsModal="true" ShowCloseIcon="true" >
    
    <DialogTemplates>
        <Header>Add New Page</Header>
        <Content>
            <EditForm Model=@Content OnValidSubmit=@DialogOnClickHandler>
                <DataAnnotationsValidator />
                <div class="row">
                <div class="col-md-4">
                    <SfTextBox ID="name" @bind-Value=@Content.Name Enabled="true" Placeholder="Page Name" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage For="@(() => Content.Name)" >@validationMessage</ValidationMessage>
                </div>
                <div class="col-md-8">
                    <SfTextBox @bind-Value=@Content.Title Enabled="true" Placeholder="Page Title" FloatLabelType="FloatLabelType.Auto" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-4">
                    <SfTextBox @bind-Value=@Content.LeftMediaId Enabled="true" Placeholder="Left Media Id" FloatLabelType="FloatLabelType.Auto" />
                </div>
                <div class="form-group col-md-4">
                    <SfTextBox @bind-Value=@Content.MiddleMediaId Enabled="true" Placeholder="Middle Media Id" FloatLabelType="FloatLabelType.Auto" />
                </div>
                <div class="col-md-4">
                    <SfTextBox @bind-Value=@Content.RightMediaId Enabled="true" Placeholder="Right Media Id" FloatLabelType="FloatLabelType.Auto" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <SfTextBox @bind-Value=@Content.HeaderMediaId Enabled="true" Placeholder="Header Media Id" FloatLabelType="FloatLabelType.Auto" />
                </div>
                <div class="col-md-4">
                    <SfTextBox @bind-Value=@Content.FooterMediaId Enabled="true" Placeholder="Footer Media Id" FloatLabelType="FloatLabelType.Auto" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <SfTextBox @bind-Value=@Content.UpdateUser Enabled="true" Placeholder="Updated By" FloatLabelType="FloatLabelType.Auto" />
                </div>
                <div class="col-md-4">
                    <SfDateTimePicker @bind-Value=@Content.UpdateDate Enabled="true" Placeholder="Updated On" FloatLabelType="FloatLabelType.Auto" />
                </div>
            </div>
            <div class="e-footer-content">
                <SfButton>Save Page</SfButton>
            </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Inject] public IContentService _svcContent { get; set; }
    [Inject] private AuthenticationStateProvider? _authState { get; set; }
    [Inject] private NavigationManager _nav { get; set; }

    [Parameter] public string PageName { get; set; }
    [Parameter] public bool IsNewPage { get; set; }

    private string validationMessage { get; set;  } = "My Message";
    private List<string> AllowedTypes = new() {".jpg",".png", ".gif" };
    private bool DialogVisible { get; set; } = false;
    private SfRichTextEditor RTE { get; set; }
    private ClaimsPrincipal? Identity { get; set; }
    private string Body { get; set; }
    private Content Content { get; set; }
    private SfToast ToastObj { get; set; }
    private string? ToastTitle { get; set; } = string.Empty;
    private int ToastTimeout { get; set; } = 6000;
    private string ToastContent { get; set; } = string.Empty;
    private string ButtonCaption { get; set; } = "Save As ...";

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.RemoveLink },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },

        new ToolbarItemModel() { Name = "Save", TooltipText = "Save File" }
    };


    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState.GetAuthenticationStateAsync();
        if (IsNewPage)
        {
            ToastTitle = $"Save Page as {PageName}";
        }
        else
        {
            ToastTitle = $"Edit Page {PageName}";
        }
        var result = await _svcContent.GetAsync(PageName);
        if(result.Success)
        {
            int.TryParse(authState.User.Claims.FirstOrDefault(c => c.Type == "LocationId").Value ?? "0", out int locationId);

            Body = result.Data.ContentHtml;
            Content = result.Data;
            Content.ContentId = 0;
            Content.UpdateDate = DateTime.Now;
            Content.CreateDate = DateTime.Now;
            Content.CreateUser = Content.UpdateUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value;
            Content.LocationId = locationId;
            Content.Name = string.Empty;
        }
        else
        {
            ToastContent = $"Unable to load page {PageName}!";
            await ToastObj.ShowAsync(new ToastModel { Title = ToastTitle, Content = ToastContent, ShowCloseButton=true });
        }
    }

    private async Task HideToast()
    {
        await this.ToastObj.HideAsync();
        _nav.NavigateTo("/administration/dashboard");
    }

    private async Task ClickHandler()
    {
        Content.ContentHtml = await RTE.GetXhtmlAsync();
        if(Content.ContentId != 0)
        {
            var result = await _svcContent.UpdateAsync(Content);
            if (result.Success)
            {
                ToastContent = "Saved Successfully!";
            }
            else
            {
                ToastContent = "Unable to save the content!";
            }
            await ToastObj.ShowAsync();

        }
        else
        {
            DialogVisible = true;
        }
    }

    private async Task DialogOnClickHandler()
    {
        var found = await _svcContent.GetAsync(Content.Name);
        if(found.Success)
        {
            // Make Name invalid
            return;
        }
        var result = await _svcContent.CreateAsync(Content);
        if (result.Success)
        {
            DialogVisible = false;
            ToastContent = "Saved Successfully!";
        }
        else
        {
            ToastContent = "Unable to save the content!";
        }
        await ToastObj.ShowAsync();

    }

}

<style>


    .rte-container {
        width: 100%;
        height: 100%;
    }

    .e-toast-container {
        margin-top: 450px;
        height: 600px;
    }

        .e-toast-container .e-toast {
            border: 1px solid black;
            border-radius: 25px;
        }
            /*Use the following CSS to customize the default toast’s title properties like font-family, font-size and color.*/
            .e-toast-container .e-toast .e-toast-message .e-toast-title {
                color: deepskyblue;
                font-size: 18px;
                font-weight: bold;
                text-align: center;
            }
            /*Use the following CSS to customize the default toast’s content properties like font-family, font-size and color.*/
            .e-toast-container .e-toast .e-toast-message .e-toast-content {
                color: black;
                font-size: 14px;
                font-weight: bold;
                background-color: lightskyblue;
                padding: 5px;
                width: 100%;
                height: 50px;
                vertical-align: middle;
                text-align: center;
            }

</style>
