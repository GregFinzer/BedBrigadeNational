@using Microsoft.AspNetCore.Components
@using BedBrigade.Common.Models
@using BedBrigade.Common.Enums
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.RichTextEditor
@using BedBrigade.Common.Logic
@using BedBrigade.SpeakIt;
@using System.IO
@using System.Diagnostics

@namespace BedBrigade.Client.Components
@inject IJSRuntime JSRuntime

<!-- DETAIL VIEW    -->

<div class="container-fluid">

    <!-- top navigation row -->
    @switch (ParentFrame)
    {
        case "Card":
            <div class="row mb-2">

                <div class="col-md-6">                                          
                    <button class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync(CurrentBlog)"><i class="fas fa-grip-horizontal"></i>&nbsp;&nbsp;@_lc.Keys["BlogBackToCards"]</button>               
                </div>


                <div class="col-md-6 text-end">
                    <button class="btn btn-secondary" @onclick="PrintHtml"><i class="fas fa-print"></i></button>
                    <button class="btn btn-primary" style="width: 180px" @onclick="() => Navigate(MovePrev)"><i class="fas fa-chevron-circle-left"></i>&nbsp;@_lc.Keys["Previous"]</button>
                    <button class="btn btn-primary" style="width: 180px" @onclick="() => Navigate(MoveNext)">@_lc.Keys["Next"]&nbsp;<i class="fas fa-chevron-circle-right"></i></button>                                        

                </div>                

            </div>
            break;
        case "Grid":
            <div class="row mb-2">
                <div class="col-md-12 text-end">
                    <button class="btn btn-secondary" @onclick="PrintHtml"><i class="fas fa-print"></i></button>
                    <button class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync(CurrentBlog)"><i class="fas fa-times-circle"></i>&nbsp;@_lc.Keys["Close"]</button>

                </div>
            </div>
            break;
    }

    @((MarkupString)BlogHtmlDisplay);                     


    <!-- bottom navigation row -->
    @if (ParentFrame == "Card")
    {
        <div class="row d-flex align-items-stretch mb-3">

            <div class="col-md-6 jd-flex justify-content-center align-items-left">
                <button class="btn btn-primary" style="width: 180px" @onclick="() => Navigate(MovePrev)"><i class="fas fa-chevron-circle-left"></i>&nbsp;@_lc.Keys["Previous"]</button>
                <button class="btn btn-primary" style="width: 180px" @onclick="() => Navigate(MoveNext)">@_lc.Keys["Next"]&nbsp;<i class="fas fa-chevron-circle-right"></i></button>
            </div>
            <div class="col-md-6 jd-flex justify-content-center align-items-right">
                <div class="dbox" style="text-align: right; vertical-align:middle">
                    <button class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync(CurrentBlog)"><i class="fas fa-grip-horizontal"></i>&nbsp;&nbsp;@_lc.Keys["BlogBackToCards"]</button>
                </div>

            </div>
        </div>

    }
    else
    {
        <div class="row d-flex align-items-stretch mb-3">
            <div class="col-md-12 jd-flex justify-content-left align-items-left">
                <button class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync(CurrentBlog)"><i class="fas fa-times-circle"></i>&nbsp;@_lc.Keys["Close"]</button>
            </div>
        </div>
    }

</div>


@code{

    [Inject] private NavigationManager? Navigation { get; set; }
    [Inject] private ILanguageContainerService? _lc { get; set; }
    [Inject] private ITranslateLogic? _translateLogic { get; set; }

    [Parameter]
    public BlogData CurrentBlog { get; set; } = default!;

    [Parameter]
    public EventCallback<BlogData> OnClose { get; set; }

    [Parameter]
    public EventCallback<string> OnNavigate { get; set; } // "Next" or "Previous"

    [Parameter]
    public string? ParentFrame { get; set; }  

    private string MoveNext = "Next";
    private string MovePrev = "Previous";
    private string BlogHtmlDisplay = String.Empty;
    private string BlogHtmlPrint = String.Empty;
    private string baseUrI = String.Empty;

    protected override void OnInitialized()
    {
        baseUrI = Navigation.BaseUri;
        _lc.InitLocalizedComponent(this);
        BlogHtmlDisplay = BlogHelper.GenerateBlogHtml(CurrentBlog);
        BlogHtmlPrint = BlogHelper.AddBaseUrlToRelativeImages(BlogHtmlDisplay, baseUrI);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Additional logic if needed
    }



    private void Navigate(string direction)
    {  
        //Debug.WriteLine($"Blog View Page - Requested Navigate: {direction}");
        try
        {
            OnNavigate.InvokeAsync(direction);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error in View Page Navigate: {ex.Message}");
        }
    
    } // Navigate
      
   
    private async Task PrintHtml()
    {
        // Send the full HTML string to JavaScript for printing
        await JSRuntime.InvokeVoidAsync("printHtmlContent", BlogHtmlPrint);
    }

}


<script>


     function printHtmlContent(htmlContent) {
        var newWindow = window.open('', '_blank');
        newWindow.document.write(htmlContent);
        newWindow.document.close();
        newWindow.focus();
        setTimeout(function () {
            newWindow.print();
            newWindow.close();
        }, 500); // Allow time for content to load before printing
    }

</script>


<style>
         
    .detail-image {
        width: auto; /* Maintain the original width */
        height: auto; /* Maintain the original height */
        max-width: 100%; /* Ensure it doesn't exceed the container width */
        display: block; /* Center-align the image if necessary */
        margin: 0 auto; /* Center the image horizontally */
    }     

    /* Box Styling */
    .dbox {
        flex: 1 1 calc(33.333% - 20px); /* 3 boxes per row on wide screens */              
        text-align: center;
        vertical-align: middle;
        padding: 5px;        
    }
       

    .image {
        width: 150px;
        height: auto;
        border: 2px solid transparent; /* Default border */
        transition: border-color 0.3s ease; /* Smooth highlight transition */
    }            
      
    
</style>