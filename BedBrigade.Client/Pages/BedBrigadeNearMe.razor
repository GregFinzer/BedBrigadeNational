@layout BedBrigade.Client.Shared.MainLayout
@inject NavigationManager NavigationManager
@inject ILocationDataService LocationService
@page "/bed-brigade-near-me"
@using System.Text.RegularExpressions
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
<div style="padding:20px">
    <p>&nbsp;</p>
    <h1>Find a Bed Brigade Near Me</h1>

    <div class="form-group">
        <label for="postalCode">Zip Code</label>
        <input id="postalCode" type="text" @bind="PostalCode" @oninput="HandleInputChange" @onkeyup="@HandleKeyDown" maxlength="5" class="form-control" placeholder="Enter the zip code where you live">
        @if (!string.IsNullOrEmpty(PostalCodeError))
        {
            <p class="text-danger">@PostalCodeError</p>
        }

        <div class="widget-body">
            <button id="search" type="button" class="btn btn-primary" @onclick="(() => HandleSearchClick())">Search</button>
        </div>

    </div>

    @if (!string.IsNullOrEmpty(PostalCodeSuccess))
    {
        <p class="text-success">@PostalCodeSuccess</p>
    }
    <ul>
        @foreach (var location in Locations)
        {
            <li><a href="javascript: location.href = '@location.Route/home'">@location.Name</a> @location.Distance.ToString("#.##") miles away</li>
        }
    </ul>
</div>

@code {
    private string PostalCode { get; set; } = string.Empty;
    private string PostalCodeError { get; set; } = string.Empty;
    private string PostalCodeSuccess { get; set; } = string.Empty;
    private List<LocationDistance> Locations { get; set; } = new List<LocationDistance>();

    private bool ValidatePostalCode()
    {
        if (string.IsNullOrEmpty(PostalCode))
        {
            PostalCodeError = "Please enter a zip code";
            return false;
        }
        if (!Regex.IsMatch(PostalCode, @"^\d{5}$"))
        {
            PostalCodeError = "Zip code must be numeric and have a length of 5.";
            return false;
        }

        PostalCodeError = null;
        return true;
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        PostalCode = e.Value.ToString();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            StateHasChanged();
            await HandleSearchClick();
        }
    }

    private async Task HandleSearchClick()
    {
        if (!ValidatePostalCode())
            return;

        var response = await LocationService.GetBedBrigadeNearMe(PostalCode);

        if (response.Success && response.Data != null)
        {
            PostalCodeSuccess = response.Message;
            Locations = response.Data;
        }
        else
        {
            PostalCodeError = response.Message;
            Locations = new List<LocationDistance>();
        }
    }




}

