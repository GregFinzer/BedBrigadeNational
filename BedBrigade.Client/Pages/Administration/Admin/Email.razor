@layout BedBrigade.Client.Shared.AdminLayout
@page "/administration/admin/email"
@attribute [Authorize(Roles = RoleNames.CanSendBulkEmail)]

<h3>Send Email</h3>

<EditForm Model="@email" OnValidSubmit="@HandleSubmit">
    <div class="form-group">
        <label for="to">To:</label>
        <InputText id="to" class="form-control" @bind-Value="email.ToAddress" />
    </div>

    <div class="form-group">
        <label for="subject">Subject:</label>
        <InputText id="subject" class="form-control" @bind-Value="email.Subject" />
    </div>

    <div class="form-group">
        <label for="body">Body:</label>
        <InputTextArea id="body" class="form-control" @bind-Value="email.Body"></InputTextArea>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<p>&nbsp;</p>

@if (isSuccess)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @message
    </div>
}
else if (isFailure)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @message
    </div>
}


@code {
    private bool isSuccess;
    private bool isFailure;
    private string message;
    private EmailQueue email = new EmailQueue();
    
    public void ShowSuccess(string successMessage)
    {
        isSuccess = true;
        isFailure = false;
        message = successMessage;
    }

    public void ShowFailure(string failureMessage)
    {
        isFailure = true;
        isSuccess = false;
        message = failureMessage;
    }


    
    private async Task HandleSubmit()
    {
        email.EmailQueueId = 0;
        var result = await EmailQueueLogic.QueueEmail(email);

        if (result.Success)
        {
            ShowSuccess("Email successfully queued.");
        }
        else
        {
            ShowFailure("Email failed to queue. " + result.Message);
        }
    }


}